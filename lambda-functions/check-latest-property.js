const { DynamoDBClient, ScanCommand } = require("@aws-sdk/client-dynamodb");
require('dotenv').config();

const client = new DynamoDBClient({ region: process.env.AWS_REGION || "eu-west-3" });

async function checkLatestProperty() {
  console.log("üîç V√©rification de la derni√®re propri√©t√© cr√©√©e...");
  
  try {
    // Scanner toutes les propri√©t√©s
    console.log("üìä Scan de toutes les propri√©t√©s...");
    const scanCommand = new ScanCommand({
      TableName: process.env.DYNAMODB_TABLE,
      FilterExpression: "begins_with(PK, :pk)",
      ExpressionAttributeValues: {
        ":pk": { S: "PROPERTY#" }
      }
    });

    const { Items } = await client.send(scanCommand);
    console.log(`üìä Nombre total de propri√©t√©s: ${Items.length}`);

    if (Items.length === 0) {
      console.log("‚ùå Aucune propri√©t√© trouv√©e");
      return;
    }

    // Trier par date de cr√©ation (createdAt)
    const sortedProperties = Items.sort((a, b) => {
      const dateA = a.createdAt?.S || a.updatedAt?.S || "1970-01-01";
      const dateB = b.createdAt?.S || b.updatedAt?.S || "1970-01-01";
      return new Date(dateB) - new Date(dateA);
    });

    // Afficher les 5 derni√®res propri√©t√©s
    console.log("\nüèÜ Les 5 derni√®res propri√©t√©s cr√©√©es:");
    console.log("=".repeat(80));
    
    sortedProperties.slice(0, 5).forEach((property, index) => {
      const propertyId = property.PK?.S?.replace("PROPERTY#", "");
      const title = property.title?.S || "Sans titre";
      const status = property.status?.S || "Statut inconnu";
      const createdAt = property.createdAt?.S || property.updatedAt?.S || "Date inconnue";
      const createdBy = property.createdBy?.S || property.createdByUserId?.S || "Utilisateur inconnu";
      const propertyType = property.propertyType?.S || "Type inconnu";
      const surface = property.surface?.N || "Surface inconnue";
      const city = property.city?.S || "Ville inconnue";
      const country = property.country?.S || "Pays inconnu";

      console.log(`\n${index + 1}. üìã PROPRI√âT√â: ${propertyId}`);
      console.log(`   üìù Titre: ${title}`);
      console.log(`   üè∑Ô∏è  Statut: ${status}`);
      console.log(`   üè† Type: ${propertyType}`);
      console.log(`   üìè Surface: ${surface} m¬≤`);
      console.log(`   üåç Localisation: ${city}, ${country}`);
      console.log(`   üë§ Cr√©√© par: ${createdBy}`);
      console.log(`   üìÖ Cr√©√© le: ${createdAt}`);
      
      // Afficher tous les champs pour debug
      console.log(`   üîç Tous les champs:`);
      Object.keys(property).forEach(key => {
        const value = property[key];
        if (value && (value.S || value.N)) {
          console.log(`      ${key}: ${value.S || value.N}`);
        }
      });
    });

    // V√©rifier sp√©cifiquement les propri√©t√©s IN_PROGRESS
    const inProgressProperties = sortedProperties.filter(p => p.status?.S === "IN_PROGRESS");
    console.log(`\nüîÑ Propri√©t√©s IN_PROGRESS: ${inProgressProperties.length}`);
    
    if (inProgressProperties.length > 0) {
      console.log("üìã Liste des propri√©t√©s IN_PROGRESS:");
      inProgressProperties.forEach((property, index) => {
        const propertyId = property.PK?.S?.replace("PROPERTY#", "");
        const title = property.title?.S || "Sans titre";
        const createdBy = property.createdBy?.S || property.createdByUserId?.S || "Utilisateur inconnu";
        console.log(`   ${index + 1}. ${propertyId} - "${title}" (par ${createdBy})`);
      });
    }

    // V√©rifier les propri√©t√©s par utilisateur
    const userProperties = {};
    sortedProperties.forEach(property => {
      const user = property.createdBy?.S || property.createdByUserId?.S || "unknown";
      if (!userProperties[user]) {
        userProperties[user] = [];
      }
      userProperties[user].push({
        id: property.PK?.S?.replace("PROPERTY#", ""),
        title: property.title?.S || "Sans titre",
        status: property.status?.S || "Statut inconnu"
      });
    });

    console.log(`\nüë• Propri√©t√©s par utilisateur:`);
    Object.keys(userProperties).forEach(user => {
      console.log(`   ${user}: ${userProperties[user].length} propri√©t√©s`);
      userProperties[user].forEach(prop => {
        console.log(`     - ${prop.id}: "${prop.title}" (${prop.status})`);
      });
    });

  } catch (error) {
    console.error("‚ùå Erreur lors de la v√©rification:", error);
  }
}

checkLatestProperty(); 