import { apiRequest, formatApiResponse } from 'utils/apiUtils';

/**
 * Cr√©er ou mettre √† jour une propri√©t√© par √©tape
 * @param {Object} params - Param√®tres de la requ√™te
 * @param {string} params.step - √âtape de cr√©ation/mise √† jour (basic, location, details, pricing, photos, timeline, calculator, contact)
 * @param {Object} params.data - Donn√©es de l'√©tape
 * @param {string} [params.propertyId] - ID de la propri√©t√© (optionnel pour la premi√®re √©tape)
 * @returns {Promise<Object>} Propri√©t√© cr√©√©e ou mise √† jour
 */
export const createOrUpdateProperty = async ({ step, data, propertyId = null }) => {
  try {
    console.log('üîÑ Cr√©ation/mise √† jour de propri√©t√©:', { step, data, propertyId });
    
    const requestData = {
      step,
      data,
      ...(propertyId && { propertyId })
    };

    // Si on a un propertyId, utiliser PUT pour mettre √† jour
    // Sinon, utiliser POST pour cr√©er
    const method = propertyId ? 'PUT' : 'POST';
    const endpoint = propertyId ? `/properties/${propertyId}` : '/properties';

    const result = await apiRequest({
      endpoint,
      method,
      data: requestData
    });
    
    const response = formatApiResponse(result);
    console.log('‚úÖ Propri√©t√© cr√©√©e/mise √† jour:', response);
    return response;
  } catch (error) {
    console.error('‚ùå Erreur dans createOrUpdateProperty:', error);
    throw error;
  }
};

/**
 * R√©cup√©rer toutes les propri√©t√©s
 * @param {Object} filters - Filtres pour la recherche
 * @param {Object} pagination - Param√®tres de pagination
 * @returns {Promise<Array>} Liste des propri√©t√©s
 */
export const getProperties = async (filters = {}, pagination = {}) => {
  try {
    console.log('üîÑ R√©cup√©ration des propri√©t√©s');
    console.log('üìã Filtres:', filters);
    console.log('üìÑ Pagination:', pagination);
    
    // Construire les param√®tres de requ√™te
    const params = new URLSearchParams();
    
    // Ajouter les filtres
    Object.entries(filters).forEach(([key, value]) => {
      if (value !== undefined && value !== null && value !== '') {
        params.append(key, value);
      }
    });
    
    // Ajouter la pagination
    if (pagination.page) params.append('page', pagination.page);
    if (pagination.limit) params.append('limit', pagination.limit);
    
    const queryString = params.toString();
    const endpoint = queryString ? `/properties?${queryString}` : '/properties';
    
    const result = await apiRequest({
      endpoint,
      method: 'GET'
    });
    const properties = formatApiResponse(result);
    console.log('‚úÖ Propri√©t√©s r√©cup√©r√©es:', properties);
    return properties;
  } catch (error) {
    console.error('‚ùå Erreur dans getProperties:', error);
    throw error;
  }
};

/**
 * R√©cup√©rer les d√©tails d'une propri√©t√© sp√©cifique par ID
 * @param {string|number} propertyId - ID de la propri√©t√©
 * @returns {Promise<Object>} D√©tails de la propri√©t√©
 */
export const getPropertyDetails = async (propertyId) => {
  try {
    console.log('üîÑ R√©cup√©ration des d√©tails de la propri√©t√©:', propertyId);

    const result = await apiRequest({
      endpoint: `/properties/${propertyId}`,
      method: 'GET'
    });

    const propertyDetails = formatApiResponse(result);
    console.log('‚úÖ D√©tails de la propri√©t√© re√ßus:', propertyDetails);

    return propertyDetails;

  } catch (error) {
    console.error('‚ùå Erreur dans getPropertyDetails:', error);
    throw error;
  }
};

/**
 * R√©cup√©rer une propri√©t√© sp√©cifique
 * @param {string} propertyId - ID de la propri√©t√©
 * @returns {Promise<Object>} Propri√©t√©
 */
export const getProperty = async (propertyId) => {
  try {
    console.log('üîÑ R√©cup√©ration de la propri√©t√©:', propertyId);
    const result = await apiRequest({
      endpoint: `/properties/${propertyId}`,
      method: 'GET'
    });
    const property = formatApiResponse(result);
    console.log('‚úÖ Propri√©t√© r√©cup√©r√©e:', property);
    return property;
  } catch (error) {
    console.error('‚ùå Erreur dans getProperty:', error);
    throw error;
  }
};

/**
 * Mettre √† jour une propri√©t√© compl√®te
 * @param {string} propertyId - ID de la propri√©t√©
 * @param {Object} propertyData - Donn√©es compl√®tes de la propri√©t√©
 * @returns {Promise<Object>} Propri√©t√© mise √† jour
 */
export const updateProperty = async (propertyId, propertyData) => {
  try {
    console.log('üîÑ Mise √† jour de la propri√©t√©:', propertyId);
    const result = await apiRequest({
      endpoint: `/properties/${propertyId}`,
      method: 'PUT',
      data: propertyData
    });
    const updatedProperty = formatApiResponse(result);
    console.log('‚úÖ Propri√©t√© mise √† jour:', updatedProperty);
    return updatedProperty;
  } catch (error) {
    console.error('‚ùå Erreur dans updateProperty:', error);
    throw error;
  }
};

/**
 * Mettre √† jour la localisation d'une propri√©t√©
 * @param {string} propertyId - ID de la propri√©t√©
 * @param {Object} locationData - Donn√©es de localisation
 * @returns {Promise<Object>} Propri√©t√© mise √† jour
 */
export const updatePropertyLocation = async (propertyId, locationData) => {
  try {
    console.log('üîÑ Mise √† jour de la localisation:', propertyId);
    const result = await apiRequest({
      endpoint: `/properties/${propertyId}/location`,
      method: 'PUT',
      data: locationData
    });
    const updatedProperty = formatApiResponse(result);
    console.log('‚úÖ Localisation mise √† jour:', updatedProperty);
    return updatedProperty;
  } catch (error) {
    console.error('‚ùå Erreur dans updatePropertyLocation:', error);
    throw error;
  }
};

/**
 * Mettre √† jour les d√©tails de la table d'une propri√©t√©
 * @param {string} propertyId - ID de la propri√©t√©
 * @param {Object} tableData - Donn√©es de la table
 * @returns {Promise<Object>} Propri√©t√© mise √† jour
 */
export const updatePropertyTable = async (propertyId, tableData) => {
  try {
    console.log('üîÑ Mise √† jour de la table:', propertyId);
    const result = await apiRequest({
      endpoint: `/properties/${propertyId}/table`,
      method: 'PUT',
      data: tableData
    });
    const updatedProperty = formatApiResponse(result);
    console.log('‚úÖ Table mise √† jour:', updatedProperty);
    return updatedProperty;
  } catch (error) {
    console.error('‚ùå Erreur dans updatePropertyTable:', error);
    throw error;
  }
};

/**
 * Mettre √† jour la timeline d'une propri√©t√©
 * @param {string} propertyId - ID de la propri√©t√©
 * @param {Object} timelineData - Donn√©es de la timeline
 * @returns {Promise<Object>} Propri√©t√© mise √† jour
 */
export const updatePropertyTimeline = async (propertyId, timelineData) => {
  try {
    console.log('üîÑ Mise √† jour de la timeline:', propertyId);
    const result = await apiRequest({
      endpoint: `/properties/${propertyId}/timeline`,
      method: 'PUT',
      data: timelineData
    });
    const updatedProperty = formatApiResponse(result);
    console.log('‚úÖ Timeline mise √† jour:', updatedProperty);
    return updatedProperty;
  } catch (error) {
    console.error('‚ùå Erreur dans updatePropertyTimeline:', error);
    throw error;
  }
};

/**
 * R√©cup√©rer les photos d'une propri√©t√©
 * @param {string} propertyId - ID de la propri√©t√©
 * @returns {Promise<Array>} Liste des photos
 */
export const getPropertyPhotos = async (propertyId) => {
  try {
    console.log('üîÑ R√©cup√©ration des photos:', propertyId);
    const result = await apiRequest({
      endpoint: `/properties/${propertyId}/photos`,
      method: 'GET'
    });
    const photos = formatApiResponse(result);
    console.log('‚úÖ Photos r√©cup√©r√©es:', photos);
    return photos;
  } catch (error) {
    console.error('‚ùå Erreur dans getPropertyPhotos:', error);
    throw error;
  }
};

/**
 * G√©rer les photos d'une propri√©t√© (ajout, suppression, r√©organisation)
 * @param {string} propertyId - ID de la propri√©t√©
 * @param {Object} photoData - Donn√©es des photos
 * @returns {Promise<Object>} R√©sultat de la gestion
 */
export const managePropertyPhotos = async (propertyId, photoData) => {
  try {
    console.log('üîÑ Gestion des photos:', propertyId);
    const result = await apiRequest({
      endpoint: `/properties/${propertyId}/photos/manage`,
      method: 'PUT',
      data: photoData
    });
    const response = formatApiResponse(result);
    console.log('‚úÖ Photos g√©r√©es:', response);
    return response;
  } catch (error) {
    console.error('‚ùå Erreur dans managePropertyPhotos:', error);
    throw error;
  }
};

export const updatePropertyStatus = async (propertyId, newStatus) => {
  try {
    console.log('üîÑ Mise √† jour du statut de la propri√©t√©:', propertyId, '‚Üí', newStatus);

    const result = await apiRequest({
      endpoint: `/properties/${propertyId}/status`,
      method: 'PUT',
      data: { status: newStatus }
    });

    const response = formatApiResponse(result);
    console.log('‚úÖ Statut mis √† jour:', response);
    return response;
  } catch (error) {
    console.error('‚ùå Erreur dans updatePropertyStatus:', error);
    throw error;
  }
};

export const deleteProperty = async (propertyId) => {
  try {
    console.log('üóëÔ∏è Suppression de la propri√©t√©:', propertyId);
    
    const result = await apiRequest({
      endpoint: `/properties/${propertyId}`,
      method: 'DELETE'
    });
    
    const response = formatApiResponse(result);
    console.log('‚úÖ Propri√©t√© supprim√©e:', response);
    return response;
  } catch (error) {
    console.error('‚ùå Erreur dans deleteProperty:', error);
    throw error;
  }
};

// Export de tous les services pour maintenir la compatibilit√©
export const propertyServices = {
  updateProperty,
  updatePropertyLocation,
  updatePropertyTable,
  updatePropertyTimeline,
  managePropertyPhotos,
};