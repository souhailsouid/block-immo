import { apiRequest, buildQueryUrl, formatApiResponse } from '../../utils/apiUtils';

/**
 * Met √† jour le prix d'une propri√©t√©
 * @param {string} propertyId - ID de la propri√©t√©
 * @param {Object} priceData - Donn√©es de prix
 * @returns {Promise<Object>} R√©ponse de l'API
 */
export const updatePropertyPrice = async (propertyId, priceData) => {
  try {
    console.log('üîÑ Mise √† jour du prix pour la propri√©t√©:', propertyId);
    console.log('üìù Donn√©es de prix:', priceData);
    
    const response = await apiRequest({
      endpoint: `/properties/${propertyId}/price`,
      method: 'PUT',
      data: priceData
    });

    const result = formatApiResponse(response);
    console.log('‚úÖ Prix mis √† jour avec succ√®s:', result);

    return result;
  } catch (error) {
    console.error('‚ùå Erreur dans updatePropertyPrice:', error);
    throw error;
  }
};

/**
 * R√©cup√®re les donn√©es de prix d'une propri√©t√© (via get-property)
 * @param {string} propertyId - ID de la propri√©t√©
 * @returns {Promise<Object>} Donn√©es de prix de la propri√©t√©
 */
export const getPropertyPrice = async (propertyId) => {
  try {
    console.log('üîç R√©cup√©ration des donn√©es de prix pour la propri√©t√©:', propertyId);

    const response = await apiRequest({
      endpoint: `/properties/${propertyId}`,
      method: 'GET'
    });
    
    const result = formatApiResponse(response);
    console.log('‚úÖ Donn√©es de prix r√©cup√©r√©es avec succ√®s:', result);
    
    // Extraire les donn√©es de prix
    return {
      propertyPrice: result.propertyPrice || null,
        numberOfInvestors: result.numberOfInvestors || null,
      status: result.status || 'open',
      fundingDate: result.fundingDate || null,
      closingDate: result.closingDate || null,
      yearlyInvestmentReturn: result.yearlyInvestmentReturn || null,
      currency: result.currency || 'USD'
    };
  } catch (error) {
    console.error('‚ùå Erreur dans getPropertyPrice:', error);
    throw error;
  }
};