import { useState } from 'react';

// @mui material components
import Dialog from '@mui/material/Dialog';
import DialogTitle from '@mui/material/DialogTitle';
import DialogContent from '@mui/material/DialogContent';
import DialogActions from '@mui/material/DialogActions';
import Grid from '@mui/material/Grid';
import Tabs from '@mui/material/Tabs';
import Tab from '@mui/material/Tab';
import Box from '@mui/material/Box';

// Material Dashboard 3 PRO React components
import MDBox from 'components/MDBox';
import MDTypography from 'components/MDTypography';
import MDButton from 'components/MDButton';

// Custom components
import DiceBearAvatar from 'components/DiceBearAvatar';

// Services
import { profileService } from 'services/api/modules/auth/profileService';

// Context
import { useNotification } from 'context/NotificationContext';

// @mui icons
import Icon from '@mui/material/Icon';

const DiceBearAvatarSelector = ({ open, onClose, onSelect, currentAvatar, userProfile }) => {
  const [selectedStyle, setSelectedStyle] = useState('pixelArt');
  const [selectedSeed, setSelectedSeed] = useState('default');
  const [isSaving, setIsSaving] = useState(false);
  const { showNotification } = useNotification();

  const avatarStyles = [
    { key: 'pixelArt', name: 'Pixel Art', icon: 'grid_on' },
    { key: 'identicon', name: 'Identicon', icon: 'pattern' },
    { key: 'bottts', name: 'Bottts', icon: 'smart_toy' },
    { key: 'avataaars', name: 'Avataaars', icon: 'face' },
    { key: 'adventurer', name: 'Adventurer', icon: 'hiking' },
    { key: 'bigEars', name: 'Big Ears', icon: 'hearing' },
    { key: 'croodles', name: 'Croodles', icon: 'brush' },
    { key: 'personas', name: 'Personas', icon: 'person' },
    { key: 'funEmoji', name: 'Fun Emoji', icon: 'emoji_emotions' },
    { key: 'lorelei', name: 'Lorelei', icon: 'auto_awesome' },
    { key: 'micah', name: 'Micah', icon: 'brush' },
    { key: 'miniavs', name: 'Mini Avatars', icon: 'crop_square' },
    { key: 'shapes', name: 'Shapes', icon: 'shapes' },
  ];

  const seedOptions = [
    'default', 'john', 'jane', 'alice', 'bob', 'charlie', 'diana', 'emma', 'frank', 'grace',
    'henry', 'iris', 'jack', 'kate', 'leo', 'mia', 'nina', 'oscar', 'pam', 'quinn',
    'rose', 'sam', 'tina', 'uma', 'vince', 'willa', 'xander', 'yara', 'zoe'
  ];

  const handleStyleChange = (event, newValue) => {
    setSelectedStyle(newValue);
  };

  const handleSeedChange = (seed) => {
    setSelectedSeed(seed);
  };

  const handleConfirm = async () => {
    setIsSaving(true);
    
    try {
      const newAvatar = {
        id: `dicebear-${selectedStyle}-${selectedSeed}`,
        src: null, // Will be generated by DiceBearAvatar
        name: `${avatarStyles.find(s => s.key === selectedStyle)?.name} - ${selectedSeed}`,
        type: 'dicebear',
        style: selectedStyle,
        seed: selectedSeed,
      };

      // Sauvegarder dans la base de données avec les champs obligatoires
      const updateData = {
        firstName: userProfile?.firstName || '',
        lastName: userProfile?.lastName || '',
        email: userProfile?.email || '',
        avatar: newAvatar
      };

       
        

      const result = await profileService.updateUserProfile(updateData);

      if (result.success) {
        showNotification(
          'Avatar Updated! 🎨',
          'Your DiceBear avatar has been saved to your profile successfully.',
          'success'
        );
        onSelect(newAvatar);
        onClose();
      } else {
        showNotification(
          'Update Failed ❌',
          'Failed to save avatar to profile. Please try again.',
          'error'
        );
      }
    } catch (error) {
       
      console.error('Error saving avatar:', error);
      showNotification(
        'Update Failed ❌',
        'An error occurred while saving your avatar. Please try again.',
        'error'
      );
    } finally {
      setIsSaving(false);
    }
  };

  const handleCancel = () => {
    onClose();
  };

  return (
    <Dialog 
      open={open} 
      onClose={handleCancel}
      maxWidth="lg"
      fullWidth
    >
      <DialogTitle>
        <MDBox display="flex" alignItems="center" gap={1}>
          <Icon color="customBlue">auto_awesome</Icon>
          <MDTypography variant="h6" fontWeight="bold" color="customBlue">
            Choose Your DiceBear Avatar
          </MDTypography>
        </MDBox>
      </DialogTitle>
      
      <DialogContent>
        <MDBox mb={3}>
          <MDTypography variant="body2" color="text">
            Select a style and customize your avatar. Each combination creates a unique avatar!
          </MDTypography>
        </MDBox>
        
        {/* Style Tabs */}
        <MDBox mb={3}>
          <Tabs 
            value={selectedStyle} 
            onChange={handleStyleChange}
            variant="scrollable"
            scrollButtons="auto"
            sx={{
              '& .MuiTab-root': {
                minWidth: 'auto',
                px: 2,
              },
            }}
          >
            {avatarStyles.map((style) => (
              <Tab
                key={style.key}
                value={style.key}
                label={
                  <MDBox display="flex" alignItems="center" gap={1}>
                    <Icon fontSize="small">{style.icon}</Icon>
                    <MDTypography variant="caption">{style.name}</MDTypography>
                  </MDBox>
                }
              />
            ))}
          </Tabs>
        </MDBox>
        
        {/* Seed Grid */}
        <MDBox>
          <MDTypography variant="h6" color="customBlue" mb={2}>
            Choose a Seed: {selectedSeed}
          </MDTypography>
          <Grid container spacing={2}>
            {seedOptions.map((seed) => (
              <Grid item xs={6} sm={4} md={3} lg={2} key={seed}>
                <MDBox
                  onClick={() => handleSeedChange(seed)}
                  sx={{
                    cursor: 'pointer',
                    borderRadius: '12px',
                    p: 1,
                    border: selectedSeed === seed 
                      ? '3px solid #1976d2' 
                      : '2px solid transparent',
                    backgroundColor: selectedSeed === seed 
                      ? 'rgba(25, 118, 210, 0.1)' 
                      : 'transparent',
                    transition: 'all 0.3s ease-in-out',
                    '&:hover': {
                      transform: 'scale(1.05)',
                      boxShadow: '0 4px 8px rgba(0,0,0,0.1)',
                    },
                  }}
                >
                  <MDBox textAlign="center">
                    <DiceBearAvatar
                      seed={seed}
                      style={selectedStyle}
                      size="md"
                    />
                    <MDTypography 
                      variant="caption" 
                      color="text" 
                      fontWeight="medium"
                      textAlign="center"
                      mt={1}
                    >
                      {seed}
                    </MDTypography>
                  </MDBox>
                </MDBox>
              </Grid>
            ))}
          </Grid>
        </MDBox>
        
        {/* Preview */}
        {selectedSeed && (
          <MDBox mt={3} p={2} borderRadius="md" sx={{ backgroundColor: 'grey.50' }}>
            <MDTypography variant="body2" color="text" mb={1}>
              Preview:
            </MDTypography>
            <MDBox display="flex" alignItems="center" gap={2}>
              <DiceBearAvatar
                seed={selectedSeed}
                style={selectedStyle}
                size="lg"
              />
              <MDTypography variant="body2" fontWeight="medium">
                {avatarStyles.find(s => s.key === selectedStyle)?.name} - {selectedSeed}
              </MDTypography>
            </MDBox>
          </MDBox>
        )}
      </DialogContent>
      
      <DialogActions>
        <MDButton 
          color="secondary" 
          onClick={handleCancel}
        >
          Cancel
        </MDButton>
        <MDButton 
          color="customBlue" 
          onClick={handleConfirm}
          disabled={!selectedSeed || isSaving}
        >
          {isSaving ? 'Saving...' : 'Confirm Selection'}
        </MDButton>
      </DialogActions>
    </Dialog>
  );
};

export default DiceBearAvatarSelector; 